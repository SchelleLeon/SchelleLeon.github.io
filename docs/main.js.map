{"version":3,"sources":["webpack:///./src/$_lazy_route_resource lazy namespace object","webpack:///./src/app/app-routing.module.ts","webpack:///./src/app/app.component.html","webpack:///./src/app/app.component.scss","webpack:///./src/app/app.component.ts","webpack:///./src/app/app.module.ts","webpack:///./src/app/dashboard/dashboard.component.html","webpack:///./src/app/dashboard/dashboard.component.scss","webpack:///./src/app/dashboard/dashboard.component.ts","webpack:///./src/app/details/details.component.html","webpack:///./src/app/details/details.component.scss","webpack:///./src/app/details/details.component.ts","webpack:///./src/app/visual/visual.component.html","webpack:///./src/app/visual/visual.component.scss","webpack:///./src/app/visual/visual.component.ts","webpack:///./src/environments/environment.ts","webpack:///./src/main.ts"],"names":[],"mappings":"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","file":"main.js","sourcesContent":["function webpackEmptyAsyncContext(req) {\n\t// Here Promise.resolve().then() is used instead of new Promise() to prevent\n\t// uncaught exception popping up in devtools\n\treturn Promise.resolve().then(function() {\n\t\tvar e = new Error('Cannot find module \"' + req + '\".');\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t});\n}\nwebpackEmptyAsyncContext.keys = function() { return []; };\nwebpackEmptyAsyncContext.resolve = webpackEmptyAsyncContext;\nmodule.exports = webpackEmptyAsyncContext;\nwebpackEmptyAsyncContext.id = \"./src/$$_lazy_route_resource lazy recursive\";","import { NgModule } from '@angular/core';\nimport { Routes, RouterModule } from '@angular/router';\nimport { DashboardComponent } from './dashboard/dashboard.component';\nimport { DetailsComponent } from './details/details.component';\nimport { VisualComponent} from './visual/visual.component';\n\nconst routes: Routes = [\n  {\n    path: '',\n    component: DashboardComponent\n  },\n  {\n    path: 'details',\n    component: DetailsComponent\n  },\n  {\n    path: 'visual',\n    component: VisualComponent\n  }\n];\n\n@NgModule({\n  imports: [\n    RouterModule.forRoot(routes)\n  ],\n  // declarations: []\n  exports: [ RouterModule ]\n})\nexport class AppRoutingModule { }\n","module.exports = \"<!-- Navigation bar of our root app component -->\\n\\n<nav>\\n  <a routerLink=\\\"\\\">Dashboard</a>\\n  <a routerLink=\\\"details\\\">Details</a>\\n  <a routerLink=\\\"visual\\\">Visual</a>\\n</nav>\\n\\n<!--\\nUsually we're nesting the different components into our root like this:\\n\\n<app-dashboard></app-dashboard>\\n<app-details></app-details>\\n<app-visual></app-visual>\\n\\nBut for now we don't need this anymore because we'er using the routing module\\nto switch between our different components with the navigation bar on our site.\\n-->\\n\\n<!-- Router outlet shows you the component you navigated through 'routerLink' -->\\n<router-outlet></router-outlet>\\n\"","module.exports = \"\"","import { Component } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\n\n@Component({\n  selector: 'app-root',\n  templateUrl: './app.component.html',\n  styleUrls: ['./app.component.scss']\n})\nexport class AppComponent {\n  title = 'TrelloView';\n\n  /**\n   * public apiKey = '4c96a328e7ea9b34311ac6dade4d0b8d';\n   * private apiToken = '20b32bb9f9a12cb3d431232af241f628dbe5e661d340630928153984cc6b81ea';\n   * */\n}\n","import { BrowserModule } from '@angular/platform-browser';\nimport { NgModule } from '@angular/core';\nimport { HttpClientModule } from '@angular/common/http';\n\n\nimport { AppComponent } from './app.component';\nimport { DashboardComponent } from './dashboard/dashboard.component';\nimport { DetailsComponent } from './details/details.component';\nimport { VisualComponent } from './visual/visual.component';\nimport { AppRoutingModule } from './/app-routing.module';\n\n\n@NgModule({\n  declarations: [\n    AppComponent,\n    DashboardComponent,\n    DetailsComponent,\n    VisualComponent\n  ],\n  imports: [\n    BrowserModule,\n    AppRoutingModule,\n    HttpClientModule\n  ],\n  providers: [],\n  bootstrap: [AppComponent]\n})\nexport class AppModule { }\n","module.exports = \"<div class=\\\"container color-dark\\\">\\n  <div class=\\\"col\\\">\\n    <p>My active Boards on Trello</p>\\n  </div>\\n  <div class=\\\"col\\\">\\n    <p>Add a new Board</p>\\n  </div>\\n</div>\\n<div class=\\\"container color-light\\\">\\n  <div class=\\\"col\\\">\\n    <ul class=\\\"board-list-container\\\">\\n      <li  *ngFor=\\\"let board of boards\\\" (click)=\\\"getCardsByBoardId(board.id)\\\">\\n        {{ board.name }}\\n      </li>\\n    </ul>\\n  </div>\\n  <div class=\\\"col\\\">\\n    <p class=\\\"sm\\\">  You can use this form to add a new Trello-Card to your selected Board.\\n                    Simply click on a Board of to Boardlist to show your current Cards.</p>\\n    <hr>\\n    <ul class=\\\"card-list-container\\\">\\n      <li  *ngFor=\\\"let card of cards\\\">\\n        {{ card.name }}\\n      </li>\\n    </ul>\\n    <form>\\n      <hr>\\n      <p class=\\\"sm\\\">  Insert the name of your new card in the textbox below and click\\n                      on the green button to finally add your card to the selected board.</p>\\n\\n      <input type=\\\"text\\\" class=\\\"txt\\\" name=\\\"card\\\" placeholder=\\\"Name of your board..\\\">\\n      <input type=\\\"submit\\\" class=\\\"btn\\\" value=\\\"Add Card\\\">\\n    </form>\\n  </div>\\n</div>\\n\"","module.exports = \".container {\\n  display: -ms-grid;\\n  display: grid;\\n  -ms-grid-columns: 50% auto;\\n      grid-template-columns: 50% auto; }\\n\\n.col {\\n  padding: .4em 1.3em; }\\n\\n.color-dark {\\n  background: #2885C4; }\\n\\n.color-light {\\n  background: #57B3F1; }\\n\\ninput.txt {\\n  border: 0;\\n  padding: 1em;\\n  width: 80%;\\n  margin-bottom: 2em; }\\n\\ninput.btn {\\n  border: 0;\\n  display: block;\\n  padding: 1em 3em;\\n  background: #A5F883;\\n  color: #003A61;\\n  margin-bottom: 1em;\\n  cursor: pointer; }\\n\\n.board-list-container {\\n  list-style: none; }\\n\\n.board-list-container li {\\n  background: #3FA0E1;\\n  padding: .5em;\\n  margin-top: 10px;\\n  cursor: pointer; }\\n\\n.board-list-container li:hover {\\n  background: #78bcea; }\\n\"","import { Component, OnInit } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\n\n@Component({\n  selector: 'app-dashboard',\n  templateUrl: './dashboard.component.html',\n  styleUrls: ['./dashboard.component.scss']\n})\nexport class DashboardComponent implements OnInit {\n\n  bId: string;\n  private apiKey = '4c96a328e7ea9b34311ac6dade4d0b8d';\n  private apiToken = '20b32bb9f9a12cb3d431232af241f628dbe5e661d340630928153984cc6b81ea';\n  private apiURL = 'https://api.trello.com/1/members/me/boards?key=' + this.apiKey + '&token=' + this.apiToken;\n\n  data: any = {};\n  boards: any;\n  cards: any;\n\n  constructor(private http: HttpClient) {}\n\n  getBoards() {\n    return this.http.get(this.apiURL).subscribe(data => {\n      this.boards = data;\n    });\n  }\n\n  getCardsByBoardId(boardId: string) {\n    this.bId = boardId;\n    const getCardsUrl = 'https://api.trello.com/1/boards/' + this.bId + '/cards?key=' + this.apiKey + '&token=' + this.apiToken;\n    return this.http.get(getCardsUrl).subscribe(data => {\n      this.cards = data;\n    });\n  }\n\n  ngOnInit() {\n    this.getBoards();\n  }\n\n}\n","module.exports = \"<p>\\n  details works!\\n</p>\\n\"","module.exports = \"\"","import { Component, OnInit } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\n\n@Component({\n  selector: 'app-details',\n  templateUrl: './details.component.html',\n  styleUrls: ['./details.component.scss']\n})\nexport class DetailsComponent implements OnInit {\n\n  constructor(private http: HttpClient) {}\n\n  ngOnInit() {\n\n  }\n\n}\n","module.exports = \"<p>\\n  visual works!\\n</p>\\n\"","module.exports = \"\"","import { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'app-visual',\n  templateUrl: './visual.component.html',\n  styleUrls: ['./visual.component.scss']\n})\nexport class VisualComponent implements OnInit {\n\n  constructor() { }\n\n  ngOnInit() {\n  }\n\n}\n","// The file contents for the current environment will overwrite these during build.\n// The build system defaults to the dev environment which uses `environment.ts`, but if you do\n// `ng build --env=prod` then `environment.prod.ts` will be used instead.\n// The list of which env maps to which file can be found in `.angular-cli.json`.\n\nexport const environment = {\n  production: false\n};\n","import { enableProdMode } from '@angular/core';\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\n\nimport { AppModule } from './app/app.module';\nimport { environment } from './environments/environment';\n\nif (environment.production) {\n  enableProdMode();\n}\n\nplatformBrowserDynamic().bootstrapModule(AppModule)\n  .catch(err => console.log(err));\n"],"sourceRoot":""}